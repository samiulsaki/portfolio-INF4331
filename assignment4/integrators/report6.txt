The comparison between all 4 function using the midpoint scheme we can see that the Midpoint Cython 
integration have always the best results. The test checks how many steps or number of N it takes to 
get to the desired result which is 2*1e-10. Computing a large scale as such takes a significant amount 
of time for all the functions except the Cython function. Here Cython is implemented in a py file and 
improves the run time of the Midpoint function in very high level. Here just running only the midpoint_cython_integrate 
alone finds the number of N to compute value colser to the 2*1e-10 in split seconds when other functions 
took hours. For sake of all the progrums I did it as target is 1e-05. The reviewer are welcome to run the 
code with the smaller target.

The test comaparison is held by runnning the following script:

$ python integrator_comparison.py

Reviewer are recomended to uncomment the error and performance function in the integrator_comparison.py 
file to observer more information about the Midpoint functions. The result of these two functions the real 
performance of all four functions with Midpoint Integration application. Although all the function seems to 
be performing very well comparing the previous simple integrational functions.

===============================================================================


Midpoint Integration Comparison: Pure vs Numpy vs Numba vs Cython


-----------------------------------------

Midpoint Pure Python Function:

Value is found at N = 100110 with this: 1.9998000200802175e-05 value

-----------------------------------------

Midpoint Numpy Function:

Value is found at N = 100110 with this: 1.9997800238796752e-05 value

-----------------------------------------

Midpoint Numba Function:

Value is found at N = 100110 with this: 1.9998000200802175e-05 value

-----------------------------------------

Midpoint Cython Function:

Value is found at N = 100610 with this: 1.9980583105243007e-05 value

-----------------------------------------


OPTIONAL:

# Error

The expected value is 2.0
Computed Midpoint with Pure Python gives 2.0000000020561743 . The difference is 0.0000000021
Computed Midpoint with Numpy gives 1.99989999706 .The difference is 0.0001000029
Computed Midpoint with Numba gives 2.0000000020561743 .The difference is 0.0000000021
Computed Midpoint with Cython gives 2.0000000020561743 .The difference is 0.0000000021
The best midpoint error is with Integrate function
The best midpoint error is with Numba function
The best midpoint error is with Cython function
-------------------------------------------------


# Performance

Midpoint Integration time 	: 0.00406991 sec
Midpoint Numpy time 		: 0.00410326 sec
Midpoint Numba time 		: 0.00520014 sec
Midpoint Cython time 		: 0.00372380 sec

Midpoint Cython function is the fastest
-------------------------------------------------

-------------------------------------------------

Midpoint Integration time 	: 0.00526931 sec
Midpoint Numpy time 		: 0.00514194 sec
Midpoint Numba time 		: 0.00657473 sec
Midpoint Cython time 		: 0.00467985 sec

Midpoint Cython function is the fastest
-------------------------------------------------

-------------------------------------------------

Midpoint Integration time 	: 0.00399108 sec
Midpoint Numpy time 		: 0.00409250 sec
Midpoint Numba time 		: 0.00511923 sec
Midpoint Cython time 		: 0.00371410 sec

Midpoint Cython function is the fastest
-------------------------------------------------