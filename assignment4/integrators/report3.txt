The following test shows that converting the pure python code to numpy did not 
made the function faster. Using Numpy the programme got on average slower despite
the integrals limits. The more the number of loops (N) are slower the ratios.

The test is held running the following file:
$ python pure_vs_numpy_testing.py

===============================================================================

Test comparison: Pure vs Numpy

-------------------------------------
Arguments given: [ f(x)=x**2, a=0, b=1, N=1000 ]

Pure 	: 0.00041 sec
Numpy 	: 0.00014 sec

Numpy is 2.990x slower
-------------------------------------

-------------------------------------
Arguments given: [ f(x)=x**2, a=1, b=3, N=10000 ]

Pure 	: 0.00424 sec
Numpy 	: 0.00017 sec

Numpy is 24.956x slower
-------------------------------------

-------------------------------------
Arguments given: [ f(x)=3*x + 4, a=0, b=2, N=10000 ]

Pure 	: 0.00439 sec
Numpy 	: 0.00020 sec

Numpy is 21.696x slower
-------------------------------------

-------------------------------------
Arguments given: [ f(x)=3*x + 4, a=0, b=3, N=1000000 ]

Pure 	: 0.49429 sec
Numpy 	: 0.01938 sec

Numpy is 25.504x slower
-------------------------------------